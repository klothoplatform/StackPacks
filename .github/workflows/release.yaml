name: Deploy

env:
  NODE_VERSION: "20.x"
  PYTHON_VERSION: "3.11"

on:
  workflow_call:
    inputs:
      stage:
        description: The stage (environment) of the deployment
        required: true
        type: string
      engine-ref:
        description: the ref (branch, tag or SHA) of the engine to build
        required: false
        type: string
        default: main
  workflow_dispatch:
    inputs:
      stage:
        description: The stage (environment) of the deployment
        required: true
        type: environment
      engine-ref:
        required: false
        type: string
        default: main

concurrency:
  group: ci-${{ inputs.stage }}

jobs:
  build-binaries:
    name: Build Binaries (engine, iac)
    uses: ./.github/workflows/build_binaries.yaml
    with:
      klotho-ref: ${{ inputs.engine-ref }}
    secrets: inherit

  deploy:
    needs:
      - build-binaries
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pipenv
        run: pip install pipenv
      - name: export requirements.txt
        run: pipenv requirements > requirements.txt
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ vars.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Download Binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: binaries
      - id: pulumi-config
        name: Resolve Pulumi Config
        working-directory: ./deploy
        run: |
          # converts the stage config to a format that pulumi can consume via config-map: <KEY>: { value: <VALUE> }
          PULUMI_ENV_CONFIG=$(cat ${{ inputs.stage }}.config.json | jq -r 'to_entries[] | "klo:\(.key): { value: \(.value | @json), secret: false }"' | sed 's/$/,/')
          echo "$PULUMI_ENV_CONFIG"
          echo "pulumi_env_config=$(echo $PULUMI_ENV_CONFIG)" >> $GITHUB_OUTPUT
          # Generate the pulumi.yaml file
          echo "name: stacksnap-${{ inputs.stage }}" > Pulumi.yaml
          echo "runtime: nodejs" >> Pulumi.yaml 
          echo 'description: "A Pulumi program that deploys the StackSnap infrastructure."' >> Pulumi.yaml
      - name: Pulumi Refresh
        uses: pulumi/actions@v4
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ""
          AWS_REGION: ${{ vars.AWS_REGION }}
          STAGE: ${{ inputs.stage }}
        with:
          command: refresh
          work-dir: "./deploy"
          stack-name: "stacksnap-${{ inputs.stage }}-${{ vars.AWS_REGION }}"
          upsert: true
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: npm install
        run: npm install
        working-directory: "./deploy"
      - name: pulumi - up
        uses: pulumi/actions@v4
        with:
          command: up
          work-dir: "./deploy"
          stack-name: "stacksnap-${{ inputs.stage }}-${{ vars.AWS_REGION }}"
          upsert: true
          config-map: |
            {
              ${{ steps.pulumi-config.outputs.pulumi_env_config }}
              aws:region: { value: "${{ vars.AWS_REGION }}", secret: false },
            }
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ""
          AWS_REGION: ${{ vars.AWS_REGION }}
          STAGE: ${{ inputs.stage }}
