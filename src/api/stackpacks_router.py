import os

from fastapi import APIRouter
from starlette.requests import Request

from src.auth.token import get_user_id
from src.project import StackConfig, get_stack_packs, generate_default
from src.project.common_stack import CommonStack
from src.project.models.project import Project

router = APIRouter()

SHOW_TEST_PACKS = os.getenv("SHOW_TEST_PACKS", "false").lower() == "true"


def config_to_dict(cfg: StackConfig):
    c = {
        "name": cfg.name,
        "description": cfg.description,
        "type": cfg.type,
        "secret": cfg.secret,
    }
    if cfg.hidden is not None:
        c["hidden"] = cfg.hidden
    if cfg.configurationDisabled is not None:
        c["configurationDisabled"] = cfg.configurationDisabled
    if cfg.default is not None:
        c["default"] = cfg.default
    if cfg.validation is not None:
        c["validation"] = cfg.validation
    if cfg.pulumi_key is not None:
        c["pulumi_key"] = cfg.pulumi_key
    if cfg.generate_default:
        validation = cfg.validation or {}
        length = min(validation.get("maxLength", 16), validation.get("minLength", 16))
        c["default"] = generate_default(length)
        c["autoGenerated"] = True

    return c


@router.get("/api/stackpacks")
async def list_stackpacks(request: Request):
    sps = get_stack_packs()
    user_id = await get_user_id(request)

    try:
        project = Project.get(user_id)
    except Project.DoesNotExist:
        project = None

    common = project.common_stackpack() if project else CommonStack([], [])

    sps = {**sps, "common": common}

    return {
        spid: {
            "id": spid,
            "name": sp.name,
            "version": sp.version,
            "description": sp.description,
            "configuration": {
                k: config_to_dict(cfg) for k, cfg in sp.configuration.items()
            },
        }
        for spid, sp in sps.items()
        if SHOW_TEST_PACKS or not spid.startswith("test_")
    }
