import os
import secrets
import string

from fastapi import APIRouter

from src.project import StackConfig, get_stack_packs

router = APIRouter()

SHOW_TEST_PACKS = os.getenv("SHOW_TEST_PACKS", "false").lower() == "true"


def generate_default(length: int):
    cs = string.ascii_letters + string.digits
    return "".join(secrets.choices(cs, k=length))


def config_to_dict(cfg: StackConfig):
    c = {
        "name": cfg.name,
        "description": cfg.description,
        "type": cfg.type,
        "secret": cfg.secret,
    }
    if cfg.default is not None:
        c["default"] = cfg.default
    if cfg.validation is not None:
        c["validation"] = cfg.validation
    if cfg.pulumi_key is not None:
        c["pulumi_key"] = cfg.pulumi_key
    if cfg.generate_default:
        length = (cfg.validation or {}).get("minLength", 16)
        c["default"] = generate_default(length)
        c["autoGenerated"] = True

    return c


@router.get("/api/stackpacks")
async def list_stackpacks():
    sps = get_stack_packs()

    return {
        spid: {
            "id": spid,
            "name": sp.name,
            "version": sp.version,
            "description": sp.description,
            "configuration": {
                k: config_to_dict(cfg) for k, cfg in sp.configuration.items()
            },
        }
        for spid, sp in sps.items()
        if SHOW_TEST_PACKS or not spid.startswith("test_")
    }
